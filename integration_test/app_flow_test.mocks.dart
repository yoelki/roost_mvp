// Mocks generated by Mockito 5.4.5 from annotations
// in roost_mvp/test/integration_test/app_flow_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:roost_mvp/data/datasources/firestore_data_source.dart' as _i3;
import 'package:roost_mvp/data/models/app_model.dart' as _i5;
import 'package:roost_mvp/data/repositories/auth_repository_impl.dart' as _i6;
import 'package:roost_mvp/domain/entities/user_entity.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserEntity_0 extends _i1.SmartFake implements _i2.UserEntity {
  _FakeUserEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirestoreDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreDataSource extends _i1.Mock
    implements _i3.FirestoreDataSource {
  MockFirestoreDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.AppModel>> getApps() =>
      (super.noSuchMethod(
            Invocation.method(#getApps, []),
            returnValue: _i4.Future<List<_i5.AppModel>>.value(<_i5.AppModel>[]),
          )
          as _i4.Future<List<_i5.AppModel>>);

  @override
  _i4.Future<void> createApp(_i5.AppModel? app) =>
      (super.noSuchMethod(
            Invocation.method(#createApp, [app]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [AuthRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepositoryImpl extends _i1.Mock
    implements _i6.AuthRepositoryImpl {
  MockAuthRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i2.UserEntity?> get authStateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#authStateChanges),
            returnValue: _i4.Stream<_i2.UserEntity?>.empty(),
          )
          as _i4.Stream<_i2.UserEntity?>);

  @override
  _i4.Future<_i2.UserEntity> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [email, password]),
            returnValue: _i4.Future<_i2.UserEntity>.value(
              _FakeUserEntity_0(
                this,
                Invocation.method(#signInWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserEntity>);

  @override
  _i4.Future<_i2.UserEntity> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [
              email,
              password,
            ]),
            returnValue: _i4.Future<_i2.UserEntity>.value(
              _FakeUserEntity_0(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [
                  email,
                  password,
                ]),
              ),
            ),
          )
          as _i4.Future<_i2.UserEntity>);

  @override
  _i4.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [FirestoreDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class IntegrationMockFirestoreDataSource extends _i1.Mock
    implements _i3.FirestoreDataSource {
  IntegrationMockFirestoreDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.AppModel>> getApps() =>
      (super.noSuchMethod(
            Invocation.method(#getApps, []),
            returnValue: _i4.Future<List<_i5.AppModel>>.value(<_i5.AppModel>[]),
          )
          as _i4.Future<List<_i5.AppModel>>);

  @override
  _i4.Future<void> createApp(_i5.AppModel? app) =>
      (super.noSuchMethod(
            Invocation.method(#createApp, [app]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
